name: CD - Train and Version Model

on:
  push:
    branches:
      - main

jobs:
  train-and-version:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Set up Python and DVC
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - run: pip install -r requirements.txt

      - name: Pull Data from DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: dvc pull

      - name: Process Data
        run: python src/data_processing.py

      - name: Train Model
        run: python src/model_training.py

      - name: Evaluate Model and Compare
        run: python src/model_evaluation.py

      # --- THIS IS THE CORRECT PLACEMENT FOR YOUR SNIPPET ---
      - name: Promote Model and Columns to Production
        if: success()
        run: |
          echo "Promoting new model and columns to production path..."
          aws s3 cp models/model.pkl s3://india-crop-yield-dvc-storage/production/model.pkl
          aws s3 cp models/model_columns.json s3://india-crop-yield-dvc-storage/production/model_columns.json
      # ---------------------------------------------------------

      - name: Version and Push Model to DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          dvc add models
          dvc push
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add models.dvc .gitignore
          # Check if there are changes to commit (typo fixed here: --staged)
          if ! git diff --staged --quiet; then
            git commit -m "chore: Train and version new model"
            git push
          else
            echo "No changes to commit. Model likely unchanged."
          fi
